{
  "properties": {
    "basicRead": {
      "description": "Mandatory if readUType is set to basicRead",
      "properties": {
        "quality": {
          "default": "ACTUAL",
          "description": "The quality of the read taken.  If absent then assumed to be ACTUAL",
          "enum": [
            "ACTUAL",
            "SUBSTITUTE",
            "FINAL_SUBSTITUTE"
          ],
          "type": [
            "string",
            "null"
          ]
        },
        "value": {
          "description": "Meter read value.  If positive then it means consumption, if negative it means export",
          "type": "number"
        }
      },
      "required": [
        "value"
      ],
      "type": [
        "object",
        "null"
      ]
    },
    "controlledLoad": {
      "description": "Indicates whether the energy recorded by this register is created under a Controlled Load regime",
      "type": [
        "boolean",
        "null"
      ]
    },
    "intervalRead": {
      "description": "Mandatory if readUType is set to intervalRead",
      "properties": {
        "aggregateValue": {
          "description": "The aggregate sum of the interval read values. If positive then it means net consumption, if negative it means net export",
          "type": "number"
        },
        "intervalReads": {
          "description": "Array of Interval read values. If positive then it means consumption, if negative it means export. Required when interval-reads query parameter equals FULL or  MIN_30.<br>Each read value indicates the read for the interval specified by readIntervalLength beginning at midnight of readStartDate (for example 00:00 to 00:30 would be the first reading in a 30 minute Interval)",
          "items": {
            "type": "number"
          },
          "type": [
            "array",
            "null"
          ]
        },
        "readIntervalLength": {
          "description": "Read interval length in minutes. Required when interval-reads query parameter equals FULL or MIN_30",
          "type": [
            "integer",
            "null"
          ],
          "x-cds-type": "PositiveInteger"
        },
        "readQualities": {
          "description": " Specifies quality of reads that are not ACTUAL.  For read indices that are not specified, quality is assumed to be ACTUAL. If not present, all quality of all reads are assumed to be actual. Required when interval-reads query parameter equals FULL or MIN_30",
          "items": {
            "properties": {
              "endInterval": {
                "description": "End interval for read quality flag",
                "type": "integer",
                "x-cds-type": "PositiveInteger"
              },
              "quality": {
                "description": "The quality of the read taken",
                "enum": [
                  "SUBSTITUTE",
                  "FINAL_SUBSTITUTE"
                ],
                "type": "string"
              },
              "startInterval": {
                "description": "Start interval for read quality flag. First read begins at 1",
                "type": "integer",
                "x-cds-type": "PositiveInteger"
              }
            },
            "required": [
              "startInterval",
              "endInterval",
              "quality"
            ],
            "type": "object"
          },
          "type": [
            "array",
            "null"
          ]
        }
      },
      "required": [
        "aggregateValue"
      ],
      "type": [
        "object",
        "null"
      ],
      "x-conditional": [
        "readIntervalLength",
        "intervalReads",
        "readQualities"
      ]
    },
    "meterId": {
      "description": "Meter id/serial number as it appears in customerâ€™s bill. ID permanence rules do not apply.",
      "type": [
        "string",
        "null"
      ]
    },
    "readEndDate": {
      "description": "Date when the meter reads end in AEST.  If absent then assumed to be equal to readStartDate.  In this case the entry represents data for a single date specified by readStartDate.",
      "type": [
        "string",
        "null"
      ],
      "x-cds-type": "DateString"
    },
    "readStartDate": {
      "description": "Date when the meter reads start in AEST and assumed to start from 12:00 am AEST.",
      "type": "string",
      "x-cds-type": "DateString"
    },
    "readUType": {
      "description": "Specify the type of the meter read data",
      "enum": [
        "basicRead",
        "intervalRead"
      ],
      "type": "string"
    },
    "registerId": {
      "description": "Register ID of the meter register where the meter reads are obtained",
      "type": [
        "string",
        "null"
      ]
    },
    "registerSuffix": {
      "description": "Register suffix of the meter register where the meter reads are obtained",
      "type": "string"
    },
    "servicePointId": {
      "description": "Tokenised ID of the service point to be used for referring to the service point in the CDR API suite.  To be created in accordance with CDR ID permanence requirements",
      "type": "string"
    },
    "unitOfMeasure": {
      "description": "Unit of measure of the meter reads. Refer to Appendix B of <a href='https://www.aemo.com.au/-/media/files/stakeholder_consultation/consultations/nem-consultations/2019/5ms-metering-package-2/final-determination/mdff-specification-nem12-nem13-v21-final-determination-clean.pdf?la=en&hash=03FCBA0D60E091DE00F2361AE76206EA'>MDFF Specification NEM12 NEM13 v2.1</a> for a list of possible values.",
      "type": [
        "string",
        "null"
      ],
      "x-cds-type": "ExternalRef"
    }
  },
  "required": [
    "servicePointId",
    "registerSuffix",
    "readStartDate",
    "readUType"
  ],
  "type": "object",
  "x-conditional": [
    "basicRead",
    "intervalRead"
  ],
  "allOf": [
    {
      "if":   {"properties": {"readUType": { "const": "basicRead" }}},
      "then": { "required": ["basicRead"]}
    },
    {
      "if":   {"properties": {"readUType": { "const": "intervalRead" }}},
      "then": { "required": ["intervalRead"]}
    }   
  ]
}